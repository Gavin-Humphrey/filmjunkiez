version: 2.1

orbs:
  heroku: circleci/heroku@1.2.1
  python: circleci/python@2.2.3

jobs:
  # Build and test the Docker image
  build-and-test:
    docker:
      - image: circleci/python:3.10-alpine

    steps:
      - checkout
      - run: sleep 60

      # Create and activate virtual environment
      - run: python -m venv venv
      - run: . venv/bin/activate

      # Install Python dependencies
      - run: pip install -r requirements.txt

      # Store cached dependencies for faster builds
      - save_cache:
          paths:
            - venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # Set DOCKERIZED environment variable
      - run: echo "DOCKERIZED=true" >> $BASH_ENV && source $BASH_ENV

      # Set PYTHONPATH for correct package resolution
      - run: echo "PYTHONPATH=$(pwd)/venv/lib/python3.12/site-packages" >> $BASH_ENV && source $BASH_ENV

      # Verify Django installation
      - run: python -m django --version

      # Run Pytest to test the Django application
      - run: pytest

      # Run database initialization and migrations
      - run: docker-compose run django python manage.py migrate

      # Setup remote Docker access for Heroku deployment
      - setup_remote_docker

      # Check DOCKER_LOGIN and DOCKER_USERNAME variables
      - run: echo $DOCKER_LOGIN
      - run: echo $DOCKER_USERNAME

      # Login to Docker Hub
      - run: docker login --username=${DOCKERHUB_USERNAME} --password-stdin ${DOCKER_LOGIN}

      # Build the Docker image first
      - run: docker build -t filmjunkiez .

      # Tag the Docker image
      - run: docker tag filmjunkiez "docker:${DOCKERHUB_USERNAME}/filmjunkiez"

      # Push the Docker image to Docker Hub
      - run: docker push "docker:${DOCKERHUB_USERNAME}/filmjunkiez"

  deploy-to-heroku:
    machine: true
    steps:
      - checkout
      - run:
          name: Build and push Docker image to Heroku
          command: |
            sudo curl https://cli-assets.heroku.com/install.sh | sh
            HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:login
            HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:push -a filmjunkiez web
            HEROKU_API_KEY=${HEROKU_TOKEN} heroku container:release -a filmjunkiez web
            
services:
  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      #POSTGRES_HOST_AUTH_METHOD: "md5"

workflows:
  version: 2
  build:
    jobs:
      - build-and-test
      - deploy-to-heroku:
          requires:
            - build-and-test
          filters:
            branches:
              only: master
